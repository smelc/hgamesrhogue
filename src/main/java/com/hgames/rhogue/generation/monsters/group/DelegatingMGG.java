package com.hgames.rhogue.generation.monsters.group;

import java.util.Collection;
import java.util.List;

import com.hgames.lib.collection.list.Lists;
import com.hgames.rhogue.animate.IAnimate;

import squidpony.squidmath.RNG;

/**
 * A forwarder to another {@link IMonstersGroupGenerator}, typically to
 * postprocess its result.
 * 
 * @author smelC
 * @param <U>
 *            Identifiers of monsters
 * @param <T>
 *            The concrete type of {@link IAnimate}s used.
 */
public abstract class DelegatingMGG<U, T extends IAnimate> extends IMonstersGroupGenerator.SkeletalMGG<U, T> {

	protected final IMonstersGroupGenerator<U, T> delegate;

	/**
	 * @param delegate
	 *            The generator to delegate to.
	 */
	public DelegatingMGG(IMonstersGroupGenerator<U, T> delegate) {
		this.delegate = delegate;
	}

	@Override
	public void generate(IMonstersFactory<U, T> factory, RNG rng, Collection<T> acc) {
		final List<T> interceptor = Lists.newArrayList();
		delegate.generate(factory, rng, interceptor);
		intercept(interceptor);
		acc.addAll(interceptor);
	}

	/**
	 * @param generateds
	 *            Monsters generated by {@link #delegate}.
	 */
	protected abstract void intercept(List<T> generateds);
}
