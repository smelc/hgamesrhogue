package com.hgames.rhogue.generation.map.rgenerator;

import java.util.EnumSet;

import com.hgames.rhogue.generation.map.DungeonSymbol;

/**
 * @author smelC
 */
public abstract class SkeletalRoomGenerator implements IRoomGenerator {

	protected EnumSet<DungeonSymbol> acceptedNeighbors = null;

	/** The maximum number of connections of rooms generated by this generator */
	protected int maxConnections = Integer.MAX_VALUE;

	protected boolean acceptsStairs = true;
	protected boolean forceDoors = false;

	private int minWidth = -1; // no constraint
	private int minHeight = -1; // no constraint
	private int maxWidth = -1; // no constraint
	private int maxHeight = -1; // no constraint

	@Override
	public EnumSet<DungeonSymbol> getAcceptedNeighbors() {
		return acceptedNeighbors;
	}

	@Override
	public void setAcceptedNeighbors(EnumSet<DungeonSymbol> neighbors) {
		this.acceptedNeighbors = neighbors;
	}

	@Override
	public boolean isAcceptingStairs() {
		return true;
	}

	@Override
	public void setAcceptsStairs(boolean val) {
		this.acceptsStairs = val;
	}

	@Override
	public void setMaxConnections(int val) {
		this.maxConnections = val;
	}

	@Override
	public void setForceDoors(boolean val) {
		this.forceDoors = val;
	}

	@Override
	public int getMaxConnections() {
		return maxConnections;
	}

	@Override
	public boolean getForceDoors() {
		return forceDoors;
	}

	@Override
	public int getMinSideSize(boolean widthOrHeight) {
		return widthOrHeight ? minWidth : minHeight;
	}

	@Override
	public void setMinSideSize(int val, boolean widthOrHeight) {
		if (widthOrHeight)
			this.minWidth = val;
		else
			this.minHeight = val;
	}

	@Override
	public void setMinSideSizes(int val) {
		this.minWidth = val;
		this.minHeight = val;
	}

	@Override
	public int getMaxSideSize(boolean widthOrHeight) {
		return widthOrHeight ? maxWidth : maxHeight;
	}

	@Override
	public void setMaxSideSize(int val, boolean widthOrHeight) {
		if (widthOrHeight)
			this.maxWidth = val;
		else
			this.maxHeight = val;
	}

	@Override
	public void setMaxSideSizes(int val) {
		this.maxWidth = val;
		this.maxHeight = val;
	}

	/**
	 * @param minOrMax
	 * @param widthOrHeight
	 * @return Whether there's a constraint imposed by
	 *         {@link #getMinSideSize(boolean)} or {@link #getMaxSideSize(boolean)}.
	 */
	protected boolean hasSideSizeConstraint(boolean minOrMax, boolean widthOrHeight) {
		return 0 <= (minOrMax ? getMinSideSize(widthOrHeight) : getMaxSideSize(widthOrHeight));
	}

	@Override
	public String toString() {
		final StringBuilder builder = new StringBuilder();
		builder.append(getClass().getSimpleName());
		builder.append(" maxConn=" + maxConnections);
		builder.append(" forceDoors=" + forceDoors);
		return builder.toString();
	}
}
