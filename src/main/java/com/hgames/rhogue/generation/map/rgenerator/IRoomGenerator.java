package com.hgames.rhogue.generation.map.rgenerator;

import java.util.EnumSet;
import java.util.HashSet;

import com.hgames.rhogue.generation.map.DungeonGenerator;
import com.hgames.rhogue.generation.map.DungeonSymbol;
import com.hgames.rhogue.generation.map.IDungeonGeneratorListener;
import com.hgames.rhogue.generation.map.RoomComponent;
import com.hgames.rhogue.zone.Zone;

import squidpony.squidmath.Coord;
import squidpony.squidmath.IRNG;

/**
 * A room generator, i.e. a function that knows out to generate a {@link Zone}
 * that fit within a rectangle.
 * 
 * <p>
 * Note that, to debug {@link IRoomGenerator}s; you may use an instance of
 * {@link IDungeonGeneratorListener} and do something in
 * {@link IDungeonGeneratorListener#placedRoom(com.hgames.rhogue.generation.map.Dungeon, IRoomGenerator, Zone)}.
 * </p>
 * 
 * @author smelC
 */
public interface IRoomGenerator {

	/**
	 * @return The possible neighbors of rooms generated by this generator. null
	 *         means all kinds are accepted.
	 */
	public /* @Nullable */ EnumSet<DungeonSymbol> getAcceptedNeighbors();

	/**
	 * Sets the value returned by {@link #getAcceptedNeighbors()}.
	 * 
	 * @param neighbors
	 */
	public void setAcceptedNeighbors(/* @Nullable */ EnumSet<DungeonSymbol> neighbors);

	/**
	 * @return Whether rooms generated by this generator accepts stairs.
	 *         {@code true} if not overwritten by
	 *         {@link #setAcceptsStairs(boolean)}.
	 */
	public boolean isAcceptingStairs();

	/**
	 * Sets the value returned by {@link #isAcceptingStairs()}.
	 * 
	 * @param val
	 */
	public void setAcceptsStairs(boolean val);

	/**
	 * Sets the value returned by {@link #getMaxConnections()}.
	 * 
	 * @param val
	 */
	public void setMaxConnections(int val);

	/**
	 * Sets the value returned by {@link #getForceDoors()}.
	 * 
	 * @param val
	 */
	public void setForceDoors(boolean val);

	/**
	 * @param rng
	 *            TODO
	 * @param component
	 *            The dungeon being built. Usually useless but handy for debugging.
	 * @param translation
	 *            The translation that will be applied to the room when placing it.
	 *            You don't need to apply it, the caller will do it. But useful to
	 *            debug.
	 * @param maxWidth
	 *            The width of the rectangle in which the returned zone must fit.
	 *            Greater than 0, greater than {@code getMinSideSize(true)} (if
	 *            relevant), and smaller or equal than {@code getMaxSideSize(true)}
	 *            (if relevant).
	 * @param maxHeight
	 *            The height of the rectangle in which the returned zone must fit.
	 *            Greater than 0, greater than {@code getMinSideSize(false)} (if
	 *            relevant), and smaller or equal than {@code getMaxSideSize(false)}
	 *            (if relevant).
	 * @return A zone such that
	 *         {@code new Rectangle(Coord.get(0, 0), maxWidth, maxHeight).contains(result)}
	 *         holds and such that any member is reachable from all other members.
	 * 
	 *         <p>
	 *         The returned zone iterating order must be stable (don't implement
	 *         {@link Zone#getAll()} with a {@link HashSet} for example).
	 *         </p>
	 * 
	 *         <p>
	 *         Or null if the size constraint cannot be honored.
	 *         </p>
	 */
	public /* @Nullable */ Zone generate(IRNG rng, RoomComponent component, Coord translation, int maxWidth,
			int maxHeight);

	/**
	 * @return The maximum number of connections to rooms generated by {@code this}.
	 */
	public int getMaxConnections();

	/**
	 * @return Whether rooms generated by {@code this} should always have doors for
	 *         all their connections, hereby bypassing
	 *         {@link DungeonGenerator#setDoorProbability(int)}.
	 */
	public boolean getForceDoors();

	/**
	 * @param widthOrHeight
	 *            Whether the maximum width or maximum height is requested
	 * @return The minimum side size that this room generator requires, or anything
	 *         negative if there's no constraint.
	 */
	public int getMinSideSize(boolean widthOrHeight);

	/**
	 * Change the value returned by {@link #getMinSideSize(boolean)}.
	 * 
	 * @param val
	 *            The new value to use
	 * @param widthOrHeight
	 */
	public void setMinSideSize(int val, boolean widthOrHeight);

	/**
	 * A shorthand for:
	 * 
	 * <code>
	 * setMinSideSize(val, true);
	 * setMinSideSize(val, false);
	 * </code>
	 * 
	 * @param val
	 */
	public void setMinSideSizes(int val);

	/**
	 * @param widthOrHeight
	 *            Whether the maximum width or maximum height is requested
	 * @return The maximum side size that this room generator requires, or anything
	 *         negative if there's no constraint.
	 */
	public int getMaxSideSize(boolean widthOrHeight);

	/**
	 * Change the value returned by {@link #getMaxSideSize(boolean)}.
	 * 
	 * @param val
	 *            The new value to use
	 * @param widthOrHeight
	 */
	public void setMaxSideSize(int val, boolean widthOrHeight);

	/**
	 * A shorthand for:
	 * 
	 * <code>
	 * setMaxSideSize(val, true);
	 * setMaxSideSize(val, false);
	 * </code>
	 * 
	 * @param val
	 */
	public void setMaxSideSizes(int val);

}
